version: '3.8'

# Main Docker Compose - Full Stack
# Run all services: docker-compose up -d

services:
  # Vector Database - Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-bots-qdrant
    ports:
      - "${QDRANT_HTTP_PORT:-6335}:6333"
      - "${QDRANT_GRPC_PORT:-6336}:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-bots-network

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ai-bots-mongodb
    ports:
      - "${MONGODB_PORT:-27018}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=aibotspass
      - MONGO_INITDB_DATABASE=ai_bots
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-bots-network

  # Python Backend API
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ai-bots-backend
    ports:
      - "${BACKEND_PORT:-9000}:8000"
    env_file:
      - .env.docker
    volumes:
      - ./db:/app/db
      - ./qdrant_data:/app/qdrant_data
      - ./.code-intelligence-state.json:/app/.code-intelligence-state.json
    depends_on:
      qdrant:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-bots-network

  # React Frontend
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: ai-bots-frontend
    ports:
      - "${FRONTEND_PORT:-4000}:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-bots-network

networks:
  ai-bots-network:
    driver: bridge

volumes:
  qdrant_storage:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

