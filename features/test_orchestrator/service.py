from typing import List, Optional
import logging
import asyncio

from shared.models import CodeFix, TestResult
from shared.clients import GitHubClient

logger = logging.getLogger(__name__)


async def orchestrate_tests(
    fixes: List[CodeFix],
    repository: str,
    branch: str = "ai-fix"
) -> Optional[str]:
    logger.info(f"Orchestrating tests for {len(fixes)} fixes")
    
    github_client = GitHubClient()
    
    for fix in fixes:
        success = github_client.create_or_update_file(
            repo_name=repository,
            file_path=fix.file_path,
            content=fix.fixed_code,
            message=f"AI Fix: {fix.explanation}",
            branch=branch
        )
        
        if not success:
            logger.error(f"Failed to push fix for {fix.file_path}")
    
    pr_url = github_client.create_pull_request(
        repo_name=repository,
        title="AI-Generated Bug Fix",
        body=f"Automated fix generated by AI Dev Agent\n\n{fixes[0].explanation if fixes else ''}",
        head=branch,
        base="main"
    )
    
    if pr_url:
        logger.info(f"Created PR: {pr_url}")
        return pr_url
    
    return None
